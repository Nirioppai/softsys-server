// models
import { EmployeeInformationModel } from './index';
import { EmployeeModel } from '../employee/index';
class EmployeeInformationService {
    constructor() {}

    async getAllEmployeeInformations() {
        try {
            const employeesInformation = await EmployeeInformationModel.find();
            return { success: true, data: employeesInformation, code: 200 };
        } catch (error) {
            return { success: false, message: 'Failed to get all employee information', deepLog: error, code: 400 };
        }
    }
    async getEmployeeInformations(id: string) {
        try {
            const employeeInformation = await EmployeeInformationModel.findById(id);
            return { success: true, data: employeeInformation, code: 200 };
        } catch (error) {
            return { success: false, message: 'Failed to get employee information', deepLog: error, code: 400 };
        }
    }
    async addEmployeeInformations(information: object, id: string) {
        try {
            //check if employee exist
            const isEmployeeExist = await EmployeeModel.findById(id);
            if (isEmployeeExist === null) {
                return { success: false, message: 'Employee does not exist', code: 400 };
            }

            //check if employee information already existing
            const isExisting = await EmployeeInformationModel.find({ employee: id }); //employee id generated by mongodb
            if (Object.keys(isExisting).length !== 0) {
                return { success: false, message: 'Employee information already exist', code: 400 };
            }

            const employeeInformation = new EmployeeInformationModel(information);
            await employeeInformation.save();
            return { success: true, data: employeeInformation, code: 200 };
        } catch (error) {
            return { success: false, message: 'Failed to add employee information', deepLog: error, code: 400 };
        }
    }
    async updateEmployeeInformations(id: string, information: object, employee: string) {
        try {
            //check if employee exist
            const isEmployeeExist = await EmployeeModel.findById(employee);
            if (isEmployeeExist === null) {
                return { success: false, message: 'Employee does not exist', code: 400 };
            }

            //check if employee information already existing
            const isExisting = await EmployeeInformationModel.findById(id); //employee information id
            if (isExisting === null) return { success: false, message: 'Employee information does not exist', code: 400 };

            const employeeInformation = await EmployeeInformationModel.findOneAndUpdate({ _id: id }, information);
            return { success: true, data: employeeInformation, code: 200 };
        } catch (error) {
            return { success: false, message: 'Failed to update employee information', deepLog: error, code: 400 };
        }
    }

    async deleteEmployeeInformations(id: string) {
        try {
            const isExisting = await EmployeeInformationModel.findById(id); //employee information id
            if (isExisting === null) return { success: false, message: 'Employee information does not exist', code: 400 };

            const employeeInformation = await EmployeeInformationModel.findOneAndDelete({ _id: id });
            return { success: true, data: employeeInformation, code: 200 };
        } catch (error) {
            return { success: false, message: 'Failed to get employees information', deepLog: error, code: 400 };
        }
    }
}

export default EmployeeInformationService;
